from fastapi import FastAPI, Depends, HTTPException
import asyncio
import logging
import os
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.sql import select, update
from .database import get_db
from .models import Stock, Signal, Subscription
from .anomaly_detector import detect_anomalies_for_ticker
from datetime import datetime
from moexalgo import Market, Ticker
import httpx
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
logger.info("Telegram-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

# –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
TICKERS = ["SBER.ME", "GAZP.ME", "LKOH.ME", "YNDX.ME", "ROSN.ME"]

@app.on_event("startup")
async def startup_event():
    logger.info("–ó–∞–ø—É—Å–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É
    logger.info("–ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    await collect_stock_data()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    asyncio.create_task(run_collector())

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞...")
    await bot.session.close()

async def run_collector():
    while True:
        logger.info("–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await collect_stock_data()
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö...")
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

async def collect_stock_data():
    logger.info(f"–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(TICKERS)} —Ç–∏–∫–µ—Ä–æ–≤: {TICKERS}")
    try:
        async with httpx.AsyncClient(transport=httpx.AsyncHTTPTransport(retries=3)) as client:
            logger.info("HTTP-–∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            try:
                async with get_db() as db:
                    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                    for ticker in TICKERS:
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ä–∞: {ticker}")
                        for attempt in range(1, 4):
                            try:
                                stock = Ticker(ticker.replace(".ME", ""), market=Market('stocks'))
                                logger.info(f"–û–±—ä–µ–∫—Ç Ticker –¥–ª—è {ticker} —Å–æ–∑–¥–∞–Ω.")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API MOEX
                                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏–∏ {ticker}")
                                stock_info = stock.info
                                logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏–∏ {ticker}: {stock_info}")
                                stock_name = stock_info.get('SHORTNAME', ticker) if isinstance(stock_info, dict) else getattr(stock_info, 'shortName', ticker)
                                logger.info(f"–ò–º—è –∞–∫—Ü–∏–∏ –¥–ª—è {ticker}: {stock_name}")

                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}")
                                price_data = stock.price_info()
                                logger.info(f"–¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}: {price_data}")
                                if not price_data or 'LAST' not in price_data:
                                    logger.warning(f"–ù–µ—Ç —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}")
                                    if attempt == 3:
                                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.")
                                        continue
                                    await asyncio.sleep(2)
                                    continue

                                last_price = price_data['LAST']
                                volume = price_data.get('VOLUME', 0)
                                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}: —Ü–µ–Ω–∞={last_price}, –æ–±—ä—ë–º={volume}")

                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
                                logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –¥–ª—è {ticker} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                                result = await db.execute(select(Stock).where(Stock.ticker == ticker))
                                stock_entry = result.scalars().first()
                                if stock_entry:
                                    logger.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è {ticker} –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                                    await db.execute(
                                        update(Stock).where(Stock.ticker == ticker).values(
                                            last_price=last_price,
                                            volume=volume,
                                            updated_at=datetime.utcnow()
                                        )
                                    )
                                    logger.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è {ticker} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: —Ü–µ–Ω–∞={last_price}, –æ–±—ä—ë–º={volume}")
                                else:
                                    logger.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é...")
                                    new_stock = Stock(
                                        ticker=ticker,
                                        name=stock_name,
                                        last_price=last_price,
                                        volume=volume
                                    )
                                    db.add(new_stock)
                                    logger.info(f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è {ticker} —Å–æ–∑–¥–∞–Ω–∞: —Ü–µ–Ω–∞={last_price}, –æ–±—ä—ë–º={volume}")
                                await db.commit()
                                logger.info(f"–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {ticker} –≤—ã–ø–æ–ª–Ω–µ–Ω.")

                                # –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
                                try:
                                    logger.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è {ticker}...")
                                    signal = await detect_anomalies_for_ticker(ticker, last_price, volume, db)
                                    if signal:
                                        new_signal = Signal(
                                            ticker=ticker,
                                            signal_type=signal["type"],
                                            value=signal["value"]
                                        )
                                        db.add(new_signal)
                                        await db.commit()
                                        logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker}: {signal}")

                                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ telegram-bot
                                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {ticker} –≤ stock-market-bot...")
                                        await client.post("https://stock-market-bot.herokuapp.com/signals", json={
                                            "ticker": ticker,
                                            "signal_type": signal["type"],
                                            "value": signal["value"]
                                        })
                                        logger.info(f"–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ stock-market-bot –¥–ª—è {ticker}")

                                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                                        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {ticker}...")
                                        subscriptions = await db.execute(
                                            select(Subscription).where(Subscription.ticker == ticker)
                                        )
                                        subscriptions = subscriptions.scalars().all()
                                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {ticker}")
                                        for sub in subscriptions:
                                            try:
                                                await bot.send_message(
                                                    chat_id=sub.user_id,
                                                    text=f"üìà –ê–∫—Ü–∏—è <b>{ticker}</b> –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 5%! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {signal['value']} RUB"
                                                )
                                                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}")
                                            except Exception as e:
                                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}: {e}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è {ticker}: {e}")
                                break
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
                                if attempt == 3:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {ticker} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
                                    break
                                await asyncio.sleep(2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP-–∫–ª–∏–µ–Ω—Ç–∞: {e}")
    logger.info("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω")

@app.get("/stocks")
async def get_stocks(db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(Stock))
    return result.scalars().all()

@app.get("/stocks/{ticker}")
async def get_stock(ticker: str, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(Stock).where(Stock.ticker == ticker))
    stock = result.scalars().first()
    if not stock:
        raise HTTPException(status_code=404, detail="Stock not found")
    return stock

@app.get("/signals")
async def get_signals(ticker: str, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(Signal).where(Signal.ticker == ticker))
    signals = result.scalars().all()
    if not signals:
        raise HTTPException(status_code=404, detail="No signals found")
    return signals

@app.get("/health")
async def health_check():
    return {"status": "Collector is running"}